# ROS1-ROS2 Bridge Dockerfile
# 갭 측정 시스템용 브리지 컨테이너

FROM ros:humble-ros-base

# 작업 디렉토리 설정
WORKDIR /workspace

# 필요한 패키지 설치
RUN apt-get update && apt-get install -y \
    python3-pip \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-rosinstall \
    python3-rosinstall-generator \
    python3-wstool \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# ROS1 Noetic은 기존 환경에서 마운트하여 사용
# 별도 설치 불필요

# ROS2 Humble 추가 패키지 설치
RUN apt-get update && apt-get install -y \
    ros-humble-desktop \
    ros-humble-ament-cmake \
    ros-humble-ament-cmake-ros \
    ros-humble-rosidl-default-generators \
    ros-humble-builtin-interfaces \
    ros-humble-std-msgs \
    ros-humble-geometry-msgs \
    && rm -rf /var/lib/apt/lists/*

# 환경 설정 (ROS2만 설정, ROS1은 마운트된 환경 사용)
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

# 로그 디렉토리 생성
RUN mkdir -p /workspace/logs

# 브리지 실행 스크립트 생성
RUN echo '#!/bin/bash\n\
echo "ROS1-ROS2 Bridge 시작..."\n\
echo "ROS1 Master URI: $ROS_MASTER_URI"\n\
echo "ROS2 Domain ID: $ROS_DOMAIN_ID"\n\
\n\
# ROS1 환경은 마운트된 기존 환경 사용\n\
# source /opt/ros/noetic/setup.bash (마운트된 환경에서 자동 로드)\n\
\n\
# ROS2 환경 설정\n\
source /opt/ros/humble/setup.bash\n\
\n\
# 기존 ros1_bridge 환경 설정\n\
if [ -f "/workspace/ros1_bridge/install/setup.bash" ]; then\n\
    source /workspace/ros1_bridge/install/setup.bash\n\
    echo "기존 ros1_bridge 환경 로드 완료"\n\
fi\n\
\n\
# 프로젝트 워크스페이스 환경 설정\n\
if [ -f "/workspace/shared_msgs/install/setup.bash" ]; then\n\
    source /workspace/shared_msgs/install/setup.bash\n\
    echo "ROS2 메시지 패키지 환경 로드 완료"\n\
fi\n\
\n\
if [ -f "/workspace/tr200_ws/devel/setup.bash" ]; then\n\
    source /workspace/tr200_ws/devel/setup.bash\n\
    echo "ROS1 메시지 패키지 환경 로드 완료"\n\
fi\n\
\n\
# 브리지 실행\n\
echo "Dynamic Bridge 실행 중..."\n\
ros2 run ros1_bridge dynamic_bridge\n\
' > /workspace/run_bridge.sh

RUN chmod +x /workspace/run_bridge.sh

# 기본 명령어
CMD ["/workspace/run_bridge.sh"]
